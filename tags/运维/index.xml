<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>运维 on 韩永发的博客</title><link>https://thecoolboyhan.github.io/tags/%E8%BF%90%E7%BB%B4/</link><description>Recent content in 运维 on 韩永发的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://thecoolboyhan.github.io/tags/%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml"/><item><title>关于Online DDL</title><link>https://thecoolboyhan.github.io/p/online-ddl/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://thecoolboyhan.github.io/p/online-ddl/</guid><description>&lt;img src="https://thecoolboyhan.github.io/p/online-ddl/onlineddl.png" alt="Featured image of post 关于Online DDL" /&gt;&lt;h2 id="online-ddl的发展史"&gt;Online DDL的发展史
&lt;/h2&gt;&lt;p&gt;在早期的MySQL版本中,DDL操作通常需要对数据表加锁，操作过程中DML操作都会被阻塞，影响正常业务。MySQL5.6和MariaDB 10.0开始支持Online DDL，可以在支持DDL操作的同时，不影响DML的正常执行，线上直接执行DDL操作对用户基本无感知（部分操作会对性能有影响）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 5.6之前
MySQL的DDL操作会按照原来的表复制一份，并做相应的修改：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;按照表A的定义新建一个表B&lt;/li&gt;
&lt;li&gt;对表A加锁&lt;/li&gt;
&lt;li&gt;在表B上执行DDL指定的操作&lt;/li&gt;
&lt;li&gt;将表A的数据拷贝到B&lt;/li&gt;
&lt;li&gt;释放A的写锁&lt;/li&gt;
&lt;li&gt;删除表A&lt;/li&gt;
&lt;li&gt;将表B重命名为A&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MySQL 5.6
官方开始支持更多的ALTER TABLE类型操作来避免数据拷贝，同时支持了在线上DDL的过程中不阻塞DML操作，真正意义上实现了Online DDL。然而并不是所有的DDL操作都支持在线操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL 5.7
在5.6的基础上又增加了新的特性，比如：增加了重命名索引支持，支持数值类型长度的增大和减少，支持了VARCHAR类型的在线增大等。基本逻辑和限制条件相比5.6并没有大的变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL 8.0对DDL的实现重新进行了设计
DDL操作支持了原子特性。另外，Online DDL的ALGORITHM参数增加了一个新的选项：INSTANT，只需要修改数据字典中的元数据，无需拷贝数据也无需重建表，同样也无需加排他MDL锁，原表数据也不受影响。整个DDL过程几乎瞬间完成的，也不会阻塞DML。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="online-ddl的算法"&gt;Online DDL的算法
&lt;/h2&gt;&lt;h3 id="copy算法之前ddl的算法"&gt;Copy算法（之前DDL的算法）
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;按照原表定义创建一个新的临时表&lt;/li&gt;
&lt;li&gt;对原表加写锁（禁止DML，允许select）&lt;/li&gt;
&lt;li&gt;对临时表进行DDL&lt;/li&gt;
&lt;li&gt;将原表数据copy到临时表&lt;/li&gt;
&lt;li&gt;释放原表的写锁&lt;/li&gt;
&lt;li&gt;将原表删除，并将临时表重命名为原表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://fastly.jsdelivr.net/gh/thecoolboyhan/th_blogs@main/image/2025-05/2024-5-1111_11_39-1715397098637_1747037696873.png"
loading="lazy"
alt="2024-5-1111_11_39-1715397098637.png"
&gt;&lt;/p&gt;
&lt;h3 id="inplace算法"&gt;Inplace算法
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://fastly.jsdelivr.net/gh/thecoolboyhan/th_blogs@main/image/2025-05/2024-5-1111_12_50-1715397170155_1747037762761.png"
loading="lazy"
alt="2024-5-1111_12_50-1715397170155.png"
&gt;&lt;/p&gt;
&lt;p&gt;在原表上进行更改，不需要生成临时表，不需要进行数据copy的过程。根据是否变更行记录格式，分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;rebuild：需要重建表（重新组织聚簇索引）。比如optimize table、添加索引、添加/删除列、修改列NULL/NOT NULL属性等；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start="2"&gt;
&lt;li&gt;no-rebuild：不需要重建表，只需要修改表的元数据，比如删除索引、修改列名、修改列默认值、修改列自增值等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;对于rebuild方式实现Online 是通过缓存DDL期间的DML，待DDL完成之后，将DML应用到表上来实现的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="说明"&gt;说明
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在copy数据到新表期间，在原表上是加的MDL读锁（允许DML，禁止DDL）&lt;/li&gt;
&lt;li&gt;在应用增量期间对原表加MDL写锁（禁止DML和DDL）&lt;/li&gt;
&lt;li&gt;根据表A重建出来的数据是放在tmp_file里的，这个临时文件是InnoDB在内部创建出来的，整个DDL过程都在InnoDB内部完成。对于server层来说，没有把数据挪动到临时表，是一个原地操作，这就是&amp;rsquo;inplace&amp;rsquo;名称的来源。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="mysql中表级别的锁有2种"&gt;MySQL中，表级别的锁有2种
&lt;/h4&gt;&lt;p&gt;一种是我们通常说的表锁，由InnoDB引擎实现，如lock tables&amp;hellip;
read/write,表锁影响较大，不常用。另一种表级别的锁是MDL（metadata lock），由server层实现，MDL我们不显示使用，是在访问数据库时由数据库自动加的，对表记录增删改查时，加MDL读锁；对表结构进行变更时，加MDL写锁。MDL锁，读读不互斥，读写、写写互斥。&lt;/p&gt;
&lt;h4 id="哪些常用操作锁表"&gt;哪些常用操作“锁表”
&lt;/h4&gt;&lt;p&gt;创建二级索引、删除索引、重命名索引、改变索引类型&amp;ndash;不“锁表”。
添加字段、删除字段、重命名字段、调整字段顺序、设置字段默认值、删除字段默认值、修改auto-increment值、调整字段允许NULL、调整字段不允许Null &amp;mdash;不“锁表”。
扩展Varchar字段大小&amp;mdash;不锁表。
更改字段数据类型，如varchar改成text&amp;mdash;锁表。&lt;/p&gt;
&lt;h2 id="online-ddl过程中的锁"&gt;Online DDL过程中的锁
&lt;/h2&gt;&lt;p&gt;默认情况下，MySQL就是支持Online的DDL操作的，在online DDL语句执行过程中，MySQL会尽量少使用锁的限制，我们不需要特殊的操作来启用它。
MySQL在选择的时候，尽量少使用锁，但不排除它会使用锁。而如果我们担心它使用了锁而导致我们不能读也不能写，显然这不是我们想要的结果，我们希望：如果选择锁，就不要执行，直接退出执行；如果没有选择锁就执行。&lt;/p&gt;
&lt;p&gt;可以在执行我们的Online DDL语句时，使用Algorithm和lock关键字，这两个关键字在我们DDL语句的最后面，用逗号隔开即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;alter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tabl_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;col_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="algorithm的选项"&gt;algorithm的选项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;inplace：替换：直接在原表上面执行DDL的操作。&lt;/li&gt;
&lt;li&gt;copy：复制：使用一种临时表的方式，克隆出一个临时表，在临时表上执行DDL，然后再把数据导入到临时表中，在重命名等。这期间需要多出一倍的磁盘空间来支撑这样的操作。执行期间，表不允许DML的操作。&lt;/li&gt;
&lt;li&gt;default：默认方式，由MySQL自己选择，优先使用inplace的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="lock选项"&gt;lock选项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;share：共享锁，执行DDL的表可以读，但是不可以写。&lt;/li&gt;
&lt;li&gt;None：没有任何限制，执行DDL的表可读可写。&lt;/li&gt;
&lt;li&gt;exclusive：排它锁，执行DDL的表不可以读也不可以写。&lt;/li&gt;
&lt;li&gt;default：默认值，由MySQL来决定是否锁表。不建议使用，如果你确定你的DDL语句不会锁表，你可以不指定lock或者指定它的值为default，否则建议指定它的锁类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行DDL操作时，algorithm选项可以不指定，这时候MySQL按照instant、inplace、copy的顺序自动选择合适的模式。也可以指定algorithm=default，也是同样的效果。如果指定algorithm选项，但不支持的话，会直接报错。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在执行OnlineDDL之前，要在非业务高峰期去执行，并要确认待执行的表上面没有未提交的事务、锁等信息。可以通过如下的SQL语句查看是否有事务和锁等信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;innodb_locks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;查询是否有锁&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;innodb_trx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;查询事务信息&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;innodb_lock_waits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;查询锁等待信息&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processlist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;数据库连接信息&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="mysql-57的在线ddl功能特点"&gt;MySQL 5.7的在线DDL功能特点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持添加辅助索引：可以在运行中的表上添加辅助索引，而不会对整个表进行锁定。&lt;/li&gt;
&lt;li&gt;支持修改列定义：可以在线修改列的数据类型、长度等定义。&lt;/li&gt;
&lt;li&gt;修改字符集合排序规则：可以在线修改表的字符集和排序规则设置。&lt;/li&gt;
&lt;li&gt;支持重命名列：可以在不影响正在进行的读写操作的情况下，对表中的列进行重命名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="实现原理和优化"&gt;实现原理和优化
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建临时表：通过创建临时表来存储将要进行的DDL操作所需要的新结构。这样旧表仍可用于读写操作。&lt;/li&gt;
&lt;li&gt;数据复制和同步：将旧表的数据逐步复制到临时表中，并保持旧表数据和临时表数据的同步，这一过程保证了数据在DDL操作期间的完整性和一致性。&lt;/li&gt;
&lt;li&gt;变更捕获和重放：通过使用日志和重做日志等机制，捕获在执行DDL操作期间发生的数据变更，并将其重放到临时表中。这确保了DDL操作完成后数据的一致性。&lt;/li&gt;
&lt;li&gt;最终切换：当DDL操作完成时，数据库引擎将在适当的时机切换到临时表，使其成为新的表结构，并且对新表进行后续的读写操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="使用限制和注意事项"&gt;使用限制和注意事项
&lt;/h2&gt;&lt;p&gt;= 并非所有DDL操作都支持在线执行，某些操作仍然需要锁定整个表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在进行DDL操作期间，可能会占用较多的系统资源，因此在高负载时应谨慎使用。&lt;/li&gt;
&lt;li&gt;进行在线DDL操作时，需要对操作进行充分的评估和测试，以确保数据的完整性和一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="online-ddl的执行过程"&gt;Online DDL的执行过程
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://fastly.jsdelivr.net/gh/thecoolboyhan/th_blogs@main/image/2025-05/2024-5-1113_15_50-1715404549579_1747037825251.png"
loading="lazy"
alt="2024-5-1113_15_50-1715404549579.png"
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务器会根据存储引擎的能力，操作的语句和用户指定的algorithm和lock选项来决定允许多大程度的并发。在这个阶段会创建一个可升级元素的共享锁（SU）来保护表定义。&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个阶段会准备并执行DDL语句，根据阶段1评估的结果来决定是否将元数据锁升级为排它锁（X），如果需要升级为排它锁，则只在DDL的准备阶段短暂的添加排它锁。&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;提交表定义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;元数据锁会升级为排它锁来更新表的定义。独占排他锁的时间非常短。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元数据锁（MDL，metadata lock）主要用于DDL和DML操作之间的并发访问控制，保护表结构（表定义）的一致，保证读写的正确性。MDL不需要显式的使用，在访问时会自动加上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Online DDL过程必须等待已经持有元数据锁的并发事务提交或者回滚才能继续执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当Online DDL操作正在等待元数据锁时，该元数据锁会处于挂起状态，后续的所有事务都会被阻塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="评估online-ddl操作的性能"&gt;评估Online DDL操作的性能
&lt;/h2&gt;&lt;p&gt;Online DDL操作的性能取决于是否发生了表的重建。在对大表执行DDL操作之前，为了避免影响正常的业务操作，最好是先评估一下DDL语句的性能再选择如何操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;复制表结构，创建一个新的表&lt;/li&gt;
&lt;li&gt;在新创建的表中插入少量数据。&lt;/li&gt;
&lt;li&gt;在新表上执行DDL操作&lt;/li&gt;
&lt;li&gt;检查执行操作后返回的rows affected 是否为0。 如果该值非0，则意味着需要拷贝表数据，此时对DDL的线上操作需要慎重考虑，周密计划。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="online-ddl原理"&gt;Online DDL原理
&lt;/h3&gt;&lt;p&gt;主要原理是将数据分为基线和增量两部分，开启一个单独线程变更基线数据，同时增量实时记录到row-log里。基线变更结束后，通过回放row-log，实现增量同步。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个过程有几个关键点：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;还是变更时获取快照，这个阶段需要禁写，确保获取snapshot对应的基线，后续增量（row-log）是一份完整的数据。&lt;/li&gt;
&lt;li&gt;在基线变更完成后，开始回放row-log，由于row-log随着业务的写入在不断地追加，因此需要基于一个前提：row-log的回放速度高于业务写入的速度，否则可能一直追不上，schema变更就无法完成。&lt;/li&gt;
&lt;li&gt;schema生效阶段同样需要禁写，确保不会有新的写进来，新的schema开始生效。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;instant ddl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有点类似于X-DBFast DDL。其余和Online DDL的基本原理保持不变。对于MySQL的Online DDL方案，需要说明的是：MySQL主备副本之间通过binlog同步， 主的schema变更完成后，才会写binlog同步给备库，然后备库才开始做DDL。假设一个ddl变更需要1小时，那么备库最多可能会延迟2倍的变更时间。若变更期间，主库发生故障，备库数据还未追平，则无法提供服务的。&lt;/p&gt;
&lt;h3 id="f1-spanner架构的online-ddl"&gt;F1-Spanner架构的Online DDL
&lt;/h3&gt;&lt;p&gt;每个server都是无状态的，多副本复制靠存储层Spanner保证。对于Spanner而言，F1-Server相当于一个客户端。数据库的schema通过Spanner持久化存储，每个F1-Server在本地维护一份schema的缓存，并通过lease机制保证缓存的时效性。任何一个F1-Server都可以接收读取请求，如果schema缓存不正确，就无法保证存取数据正确性。&lt;/p&gt;
&lt;p&gt;如为表Realation（PK，C1）新加索引index（C1）。首先选举一个F1-Server作为owner，记为F1-Server1，执行DDL后拥有了new-schema，同时假设F1-Server2仍然使用old-schema。&lt;/p&gt;
&lt;p&gt;对于某个记录，F1-Server1会同时写入主表和索引数据；如果该记录后续被F1-Server2删除，那么只会删除主表记录，索引数据就会残留在系统中，这就产生了不一致。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S1（absent）：变更前的状态&lt;/li&gt;
&lt;li&gt;s2（delete-only）：只允许删除新二级索引，忽略新二级索引写入，不允许读新二级索引&lt;/li&gt;
&lt;li&gt;s3（write-only）：当所有F1-Server都达到S2状态后，开始进入这一阶段，允许删除/写入新二级索引进kv层，不允许读新二级索引，并开始扫描基线数据，构造新的二级索引&amp;lt;key,value&amp;gt;到kv层。&lt;/li&gt;
&lt;li&gt;s4（public):新二级索引对外可见（可读）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;F1论文详细论述了经过这4个状态的转变，如何保证一致性，过程较为复杂。
&lt;img src="https://fastly.jsdelivr.net/gh/thecoolboyhan/th_blogs@main/image/2025-05/2024-5-1317_29_15-1715592555187_1747037878748.png"
loading="lazy"
alt="2024-5-1317_29_15-1715592555187.png"
&gt;&lt;/p&gt;
&lt;h3 id="copy算法"&gt;copy算法
&lt;/h3&gt;&lt;p&gt;较简单的实现方法，MySQL 会建立一个新的临时表，把源表的所有数据写入到临时表，在此期间无法对源表进行数据写入。MySQL 在完成临时表的写入之后，用临时表替换掉源表。这个算法主要被早期（&amp;lt;=5.5）版本所使用。&lt;/p&gt;
&lt;h3 id="inplance算法"&gt;inplance算法
&lt;/h3&gt;&lt;p&gt;从5.6开始，常用的DDL都默认使用这个算法。inplace算法包含两类：inplace-no-rebuild和inplace-rebuild，两者的主要差异在于是否需要重建源表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prepare阶段：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;创建新的临时frm文件（与InnoDB无关）。&lt;/li&gt;
&lt;li&gt;持有exclusive-MDL锁，禁止读写。&lt;/li&gt;
&lt;li&gt;根据alter类型，确定执行方式（copy，Online-rebuild，Online-not-rebuild）。更新数据字典的内存对象。&lt;/li&gt;
&lt;li&gt;分配row_log对象记录数据变更的增量（仅rebuild类型需要）。&lt;/li&gt;
&lt;li&gt;生产新的临时ibd文件new_table（仅rebuild类型需要）。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;execute阶段：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;降级MDL锁，允许读写。&lt;/li&gt;
&lt;li&gt;扫描old_table聚簇索引（主键）中的每条记录rec。&lt;/li&gt;
&lt;li&gt;遍历new_table的聚簇索引和二级索引，逐一处理。根据rec构造对应的索引项。&lt;/li&gt;
&lt;li&gt;将构造索引项插入sort_buffer块排序。将sort_buffer块更新到new_table的索引上。&lt;/li&gt;
&lt;li&gt;记录Online-ddl执行过程中产生的增量（仅rebuild类型需要）。&lt;/li&gt;
&lt;li&gt;重放row_log中的操作到new_table的索引上（not-rebuild数据是在原表上更新）。&lt;/li&gt;
&lt;li&gt;重放row_log中的DML操作到new_table的数据行上。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;commit阶段：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;当前block为row_log最后一个时，禁止读写，升级到exclusive-MDL锁。&lt;/li&gt;
&lt;li&gt;重做row_log中最后一部分增量。更新InnoDB的数据字典。&lt;/li&gt;
&lt;li&gt;提交事务（刷事务的redo日志）。修改统计信息。&lt;/li&gt;
&lt;li&gt;rename临时Ibd文件，frm文件。&lt;/li&gt;
&lt;li&gt;变更完成后，是否exclusive-MDL锁。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="instant-算法"&gt;instant 算法
&lt;/h3&gt;&lt;p&gt;MySQL 8.0.12 才提出的新算法，目前只支持添加列等少量操作，利用 8.0 新的表结构设计，可以直接修改表的 metadata 数据，省掉了 rebuild 的过程，极大的缩短了 DDL 语句的执行时间。&lt;/p&gt;
&lt;h3 id="pt-online-schema-change"&gt;pt-online-schema-change
&lt;/h3&gt;&lt;p&gt;借鉴了 copy 算法的思路，由外部工具来完成临时表的建立，数据同步，用临时表替换源表这三个步骤。其中数据同步是利用 MySQL 的触发器来实现的，会少量影响到线上业务的 QPS 及 SQL 响应时间。&lt;/p&gt;
&lt;h3 id="mysql-80特性-instant-add-column快速加列"&gt;MySQL 8.0特性 instant add column(快速加列）
&lt;/h3&gt;&lt;p&gt;快速加列采用的算法是instant算法，使得添加列时不再需要rebuild整个表，只需要在表的metadata中记录新增列的基本信息即可。&lt;/p&gt;
&lt;p&gt;mysql8.0对表metadata结构做出了变更。8.0除了在表的metadata信息中新增了instant列的默认值以及非instant列的数量之外，还在数据的物理记录中加入了info_bit，包括一个flag来标记这条记录是否为添加instant列之外才更新、插入的，以及column_num，用来记录行数据总共有多少列。&lt;/p&gt;
&lt;p&gt;当使用instant算法来添加列的时候，无需rebuild表，直接把列的信息记录到metadata中即可，对这些行进行操作时，可以读取metadata的信息来组合出完整的行数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select：读取一行数据的物理记录时，会根据flag来判断是否需要去metadata中获取instant列的信息；如果需要，则根据colu-mn_num来读取实际的物理数据，再从metadata中补全缺少的instant列数据。&lt;/li&gt;
&lt;li&gt;insert：额外记录语句执行时的flag和column_num&lt;/li&gt;
&lt;li&gt;delete：与以前的版本保持一致&lt;/li&gt;
&lt;li&gt;Update：如果表的instant column数量发生了变化，对旧数据的update会在内部转换成delete和insert操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当对包含instant列的表进行rebuild时，所有数据在rebuild的过程中重新以旧的数据格式（包含所有列的内容）写入到表中，所以rebuild表之后，information_schema中有关这个表的instant的信息会被重置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="默认使用instant算法的操作"&gt;默认使用instant算法的操作：
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;添加列&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;不支持删除普通列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start="2"&gt;
&lt;li&gt;添加或删除一个虚拟列&lt;/li&gt;
&lt;li&gt;添加或者删除一个列的默认值&lt;/li&gt;
&lt;li&gt;修改enum或者set列的定义&lt;/li&gt;
&lt;li&gt;变更索引的类型（B树、哈希）&lt;/li&gt;
&lt;li&gt;使用alter语法重命名表&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="使用限制"&gt;使用限制
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果alter语句包含了add column和其他操作，其中有操作不支持instant算法的，那么alter语句会报错，所有的操作都不会执行。&lt;/li&gt;
&lt;li&gt;添加列时，不能使用after关键字控制列的位置，只能添加在表的末尾（最后一列）。&lt;/li&gt;
&lt;li&gt;开启压缩的InnoDB表无法使用instant算法。&lt;/li&gt;
&lt;li&gt;不支持包含全文索引的表。&lt;/li&gt;
&lt;li&gt;仅支持使用mysql8.0新表空间格式的表。&lt;/li&gt;
&lt;li&gt;不支持临时表。&lt;/li&gt;
&lt;li&gt;包含instant列的表无法再旧版本的mysql上使用（即物理备份无法恢复）。&lt;/li&gt;
&lt;li&gt;在旧版本上，如果表或者表的索引已经corrupt，除非已经执行fix或者rebuild，否则升级到新版本后无法添加instant列。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="各版本支持的-online-ddl语句"&gt;各版本支持的 Online DDL语句
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://fastly.jsdelivr.net/gh/thecoolboyhan/th_blogs@main/image/2025-05/2024-5-1113_49_16-1715406556009_1747037918250.png"
loading="lazy"
alt="2024-5-1113_49_16-1715406556009.png"
&gt;&lt;/p&gt;
&lt;h3 id="各版本online-ddl支持情况"&gt;各版本Online DDL支持情况
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://fastly.jsdelivr.net/gh/thecoolboyhan/th_blogs@main/image/2025-05/2024-5-1113_57_36-1715407056279_1747037944367.png"
loading="lazy"
alt="2024-5-1113_57_36-1715407056279.png"
&gt;&lt;/p&gt;
&lt;h2 id="ddl的执行模式"&gt;DDL的执行模式
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;instant DDL 是MySQL8.0 引入的新功能，当前支持的范围较小，包括：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;修改二级索引类型&lt;/li&gt;
&lt;li&gt;新增列&lt;/li&gt;
&lt;li&gt;修改列默认值&lt;/li&gt;
&lt;li&gt;修改列ENUM值&lt;/li&gt;
&lt;li&gt;重命名表&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;在执行DDL操作时，MySQL内部对algorithm的选择策略：
如果用户显示指定了algorithm，那么使用用户指定的选项。
如果用户未指定，那么如果该操作支持inplace在优先选择inplace，否则选择copy。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;目前不支持inplace的操作主要有：
删除主键
修改列数据类型
修改表字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;我们常说的Online DDL，其实是从DML操作的角度描述的，如果DDL操作不阻塞DML操作，那个这个DDL就是Online的。目前8.0默认非Online的DDL有：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;新增全文索引&lt;/li&gt;
&lt;li&gt;新增空间索引&lt;/li&gt;
&lt;li&gt;删除主键&lt;/li&gt;
&lt;li&gt;修改列数据类型&lt;/li&gt;
&lt;li&gt;指定表字符集&lt;/li&gt;
&lt;li&gt;修改表字符集&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="qa"&gt;Q&amp;amp;A
&lt;/h2&gt;&lt;h3 id="online-ddl会不会锁表"&gt;Online DDL会不会锁表？
&lt;/h3&gt;&lt;p&gt;很多MySQL用户经常在表无法正常的进行DML时就觉得是表锁了，这种说法其实是过于宽泛，实际上能够影响DML操作的锁至少包括以下几种（InnoDB）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MDL锁&lt;/li&gt;
&lt;li&gt;表锁&lt;/li&gt;
&lt;li&gt;行锁&lt;/li&gt;
&lt;li&gt;GAP锁
其中除了MDL锁是在Server层加的之外，其他三种都是在InnoDB层加的。所有操作都是需要先拿Server层的MDL锁，然后再去拿InnoDB层的某个需要的锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个DDL的基本过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在开始进行DDL时，需要拿到对应表的MDL X锁，然后进行一系列的准备工作；&lt;/li&gt;
&lt;li&gt;将MDL X锁降级为MDL S锁，进行真正的DDL操作。&lt;/li&gt;
&lt;li&gt;再次将MDL S锁升级为MDL X锁，完成DDL操作，释放DML锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;真正执行DDL操作期间，确实是不会“锁表”的，但如果在第一阶段拿MDL X锁时无法正常获取，那就可能真的会“锁表”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;select sleep(500) from mytest.t1;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;## session 2
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;optimize table mytest.t1;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;## session 3
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;select * from mytest.t1;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;session 1模拟了一个慢查询，然后session 2 可是进行DDL操作，无法拿到MDL X锁，处于等待中。此时session 3 需要执行一个查询，发现无法执行。实际上，在session 1 结束前，表t1的所有操作都无法进行了，也可以说表t1“锁表”了。MySQL 5.7/8.0可以在开启performance_schema的情况下直接查询metadata_locks表。阿里云RDS新增了L_S.MDL_INFO表，提供DML的查询。&lt;/p&gt;
&lt;p&gt;现在回答问题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Online DDL并不是绝对安全，更不是可以随意执行的。线上操作还是需要在业务低峰期谨慎操作。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="支持inplace算法的ddl一定是online的"&gt;支持inplace算法的DDL一定是Online的？
&lt;/h3&gt;&lt;p&gt;inplace和Online是两个不同维度的事情。copy和inplace指的是DDL内部的执行逻辑。
copy是在server层的操作，inplace是在InnoDB层的操作。
而用户更加关心Online与否，通常只和一个问题有关：是否允许并发DML。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy算法执行的DDL肯定不是Online的。&lt;/li&gt;
&lt;li&gt;inplace算法执行的DDL不一定是Online的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="inplace-ddl需不需要额外的数据空间"&gt;inplace DDL需不需要额外的数据空间
&lt;/h3&gt;&lt;p&gt;MySQL内部对于DDL的algorithm有两种选择：inplace和copy（8.0新增了instant，但使用范围较小）。
copy：创建一张临时表，然后将原表的数据拷贝到临时表中，最后再用临时表替换原表。对于上面的步骤，由于需要将原表的数据拷贝到临时表中，所以肯定需要消耗额外的数据空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于支持inplace算法的DDL，是不是不需要额外的数据空间？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要。inplace描述的是表，而不是数据文件。只要不创建临时表，那么就都是inplace的。
实际上，很多inplace DDL都会重建表（会创建临时数据文件），所以都会需要额外的数据空间。&lt;/p&gt;
&lt;p&gt;需要重建表的操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加主键&lt;/li&gt;
&lt;li&gt;重建主键&lt;/li&gt;
&lt;li&gt;新增列（8.0支持instant DDL，不需要）&lt;/li&gt;
&lt;li&gt;删除列&lt;/li&gt;
&lt;li&gt;调整列顺序&lt;/li&gt;
&lt;li&gt;删除列默认值&lt;/li&gt;
&lt;li&gt;增加列默认值&lt;/li&gt;
&lt;li&gt;修改表的row_format&lt;/li&gt;
&lt;li&gt;optimize表&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>